package fr.obelouix.ultimate.config;

import fr.obelouix.ultimate.ObelouixUltimate;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.Bukkit;
import org.bukkit.World;
import org.spongepowered.configurate.CommentedConfigurationNode;
import org.spongepowered.configurate.ConfigurateException;
import org.spongepowered.configurate.hocon.HoconConfigurationLoader;
import org.spongepowered.configurate.serialize.SerializationException;

import java.util.*;

public class Config {

    private static final HoconConfigurationLoader configLoader = HoconConfigurationLoader.builder()
            .path(ObelouixUltimate.getInstance().getDataFolder().toPath().resolve("config.conf"))
            .build();
    private static final Set<World> coordinatesBlacklist = new HashSet<>();
    private static CommentedConfigurationNode root;
    private static CommentedConfigurationNode featuresNode;
    private static CommentedConfigurationNode serverNode;
    private static boolean customServerNameEnabled;
    private static String customServerName;
    private static boolean customListPingEnabled;
    private static String customListPingVersion;
    private static boolean isCoordinatesFeatureEnabled;
    private static boolean isInvisibleItemFrameEnabled;
    private static boolean isCancelJumpBoostFallDamageEnabled;
    private static boolean isFastFurnaceEnabled;
    private static double fastFurnaceSpeedMultiplier;
    private static boolean alertOnVillagerDeath;
    private static boolean perWorldAlertOnVillagerDeath;
    private static List<String> villagerDeathWorldBlacklist = new ArrayList<>();

    public void loadConfig() {
        try {
            root = configLoader.load();
            featuresNode = root.node("features");
            serverNode = root.node("server");

            addMissingNodes();

        } catch (ConfigurateException e) {
            ObelouixUltimate.getInstance().getComponentLogger().error(Component.text("Error while loading config file", NamedTextColor.DARK_RED));
            e.printStackTrace();
        }

        readConfig();

    }

    private void addMissingNodes() throws SerializationException {

        if (root.node("_useless_node_").empty()) {
            root.node("_useless_node_")
                    .set("Here just to show the comments at the top of the config file")
                    .comment("""
                            ObelouixUltimate configuration file
                            WARNING: This file is automatically generated, so things like "enabled" might be at the end of a {} block.
                            """);
        }

        if (featuresNode.node("coordinates", "enabled").empty()) {
            featuresNode.node("coordinates", "enabled").set(true)
                    .comment("Enable or disable the coordinates feature.");
        }

        if (featuresNode.node("coordinates", "blacklist").empty()) {
            featuresNode.node("coordinates", "blacklist")
                    .setList(String.class, new ArrayList<>())
                    .comment("""
                            List of worlds where the coordinates feature will be disabled.
                            Must be in this format: blacklist=["world1","world2"]
                            """);
        }

        if (featuresNode.node("invisible-item-frame", "enabled").empty()) {
            featuresNode.node("invisible-item-frame", "enabled").set(true)
                    .comment("Enable or disable the invisible item frame feature.");
        }

        if (featuresNode.node("cancel-jump-boost-fall-damage", "enabled").empty()) {
            featuresNode.node("cancel-jump-boost-fall-damage", "enabled").set(true)
                    .comment("Enable or disable fall damages when player has jump boost effect.");
        }

        if (featuresNode.node("fast-furnace", "enabled").empty()) {
            featuresNode.node("fast-furnace", "enabled").set(false)
                    .comment("Allow or not the furnace to be faster than the default speed.");
        }

        if (featuresNode.node("fast-furnace", "speed-multiplier").empty()) {
            featuresNode.node("fast-furnace", "speed-multiplier").set(1.0)
                    .comment("""
                            The speed multiplier of the furnace. 2.0 means twice as fast. It is 1.0 by default.
                            Must be between 0 and 200""");
        }

        if (featuresNode.node("alert-on-villager-death", "enabled").empty()) {
            featuresNode.node("alert-on-villager-death", "enabled").set(false)
                    .comment("Enable or disable the alert when a villager dies.");
        }

        if (featuresNode.node("alert-on-villager-death", "per-world").empty()) {
            featuresNode.node("alert-on-villager-death", "per-world").set(false)
                    .comment("If enabled, the alert will only be sent in the world where the villager died. Else, it will be sent globally.");
        }

        if (featuresNode.node("alert-on-villager-death", "world-blacklist").empty()) {
            featuresNode.node("alert-on-villager-death", "world-blacklist")
                    .setList(String.class, new ArrayList<>())
                    .comment("""
                            List of worlds where the alert will not be sent.
                            Must be in this format: world-blacklist=["world1","world2"]
                            """);
        }

        addMissingServerNodes();

        saveConfig();
    }

    private void addMissingServerNodes() throws SerializationException {
        if (serverNode.node("custom-brand", "enabled").empty()) {
            serverNode.node("custom-brand", "enabled").set(false)
                    .comment("Enable or disable the custom server brand feature.");
        }
        if (serverNode.node("custom-brand", "server-name").empty()) {
            serverNode.node("custom-brand", "server-name").set("ObelouixUltimate")
                    .comment("The name of your server that will be displayed in the F3 menu.");
        }

        if (serverNode.node("custom-list-ping", "enabled").empty()) {
            serverNode.node("custom-list-ping", "enabled").set(false)
                    .comment("Enable or disable the custom list ping feature.");
        }

        if (serverNode.node("custom-list-ping", "version").empty()) {
            serverNode.node("custom-list-ping", "version").set("Custom version " + Bukkit.getMinecraftVersion())
                    .comment("""
                            The version of your server that will be displayed in the server list
                            when the client has an incompatible version
                            """);
        }

    }


    private void readConfig() {
        try {
            readFeaturesConfig();
            readServerConfig();
        } catch (SerializationException e) {
            ObelouixUltimate.getInstance().getComponentLogger().error(Component.text("Error while reading config file", NamedTextColor.DARK_RED));
            e.printStackTrace();
        }
    }

    private void readFeaturesConfig() throws SerializationException {
        readCoordinatesConfig();
        readInvisibleItemFrameConfig();
        readCancelJumpBoostFallDamageConfig();
        readFastFurnaceConfig();
        readVillagerDeathAlertConfig();
    }

    private void readInvisibleItemFrameConfig() {
        isInvisibleItemFrameEnabled = featuresNode.node("invisible-item-frame", "enabled").getBoolean();
    }

    private void readCancelJumpBoostFallDamageConfig() {
        isCancelJumpBoostFallDamageEnabled = featuresNode.node("cancel-jump-boost-fall-damage", "enabled").getBoolean();
    }

    private void readVillagerDeathAlertConfig() throws SerializationException {
        alertOnVillagerDeath = featuresNode.node("alert-on-villager-death", "enabled").getBoolean();
        perWorldAlertOnVillagerDeath = featuresNode.node("alert-on-villager-death", "per-world").getBoolean();
        villagerDeathWorldBlacklist = featuresNode.node("alert-on-villager-death", "world-blacklist").getList(String.class);
    }

    private void readServerConfig() throws SerializationException {
        customServerNameEnabled = serverNode.node("custom-brand", "enabled").getBoolean();
        if (customServerNameEnabled) {
            System.out.println("custom server name enabled");
            customServerName = serverNode.node("custom-brand", "server-name").getString();
        }

        customListPingEnabled = serverNode.node("custom-list-ping", "enabled").getBoolean();
        if (customListPingEnabled) {
            customListPingVersion = serverNode.node("custom-list-ping", "version").getString();
        }

    }

    private void readCoordinatesConfig() throws SerializationException {
        if (featuresNode.node("coordinates", "enabled").getBoolean()) {
            isCoordinatesFeatureEnabled = true;

            Objects.requireNonNull(featuresNode.node("coordinates", "blacklist").getList(String.class)).forEach(worldName -> {
                final World world = ObelouixUltimate.getInstance().getServer().getWorld(worldName);
                if (world != null) {
                    coordinatesBlacklist.add(world);
                }
            });
        }

    }

    private void readFastFurnaceConfig() {
        if (featuresNode.node("fast-furnace", "enabled").getBoolean()) {
            isFastFurnaceEnabled = true;
            fastFurnaceSpeedMultiplier = featuresNode.node("fast-furnace", "speed-multiplier").getDouble() < 0 ?
                    1.0 : featuresNode.node("fast-furnace", "speed-multiplier").getDouble() > 200 ?
                    200.0 : featuresNode.node("fast-furnace", "speed-multiplier").getDouble();

        }
    }

    public void saveConfig() {
        try {
            configLoader.save(root);
        } catch (ConfigurateException e) {
            throw new RuntimeException(e);
        }
    }

    public final boolean isCoordinatesFeatureEnabled() {
        return isCoordinatesFeatureEnabled;
    }

    public final Set<World> getCoordinatesBlacklist() {
        return coordinatesBlacklist;
    }

    public final boolean isCustomServerNameEnabled() {
        return customServerNameEnabled;
    }

    public final boolean isCustomListPingEnabled() {
        return customListPingEnabled;
    }

    public final String getCustomListPingVersion() {
        return customListPingVersion;
    }

    public final String getCustomServerName() {
        return customServerName;
    }

    public final boolean isInvisibleItemFrameEnabled() {
        return isInvisibleItemFrameEnabled;
    }

    public final boolean isCancelJumpBoostFallDamageEnabled() {
        return isCancelJumpBoostFallDamageEnabled;
    }

    public final boolean isFastFurnaceEnabled() {
        return isFastFurnaceEnabled;
    }

    public final double getFastFurnaceSpeedMultiplier() {
        return fastFurnaceSpeedMultiplier;
    }

    public final boolean isAlertOnVillagerDeathEnabled() {
        return alertOnVillagerDeath;
    }

    public final boolean perWorldAlertVillagerDeath() {
        return perWorldAlertOnVillagerDeath;
    }

    public final List<String> getVillagerDeathWorldBlacklist() {
        return villagerDeathWorldBlacklist;
    }

}
